시나리오)스프링 부트에서 http://localhost:8080만을 열 수 있는 간단한 웹 소스를 개발한다.
개발한 소스를 github에 업로드하면 github action이 작동하여 소스 코드를 jar파일을 생성하고
aws의 웹 배포파일을 github action의 가상머신에서 aws에 jar파일을 업로드하고 nohup을 이용하여 백그라운드에 작동시키는 과정을 작성한다.
추가적으로 기존에 실행되는 jar파일은 중지 또는 프로세스 종료하도록 설정한다.

#사용자 데이터
#!/bin/bash
apt-get update -y
apt-get install -y openjdk-17-jdk
JAVA_HOME_PATH=$(readlink -f /usr/bin/java | sed "s:bin/java::")
echo "export JAVA_HOME=${JAVA_HOME_PATH}" >> /etc/profile
echo 'export PATH=$JAVA_HOME/bin:$PATH' >> /etc/profile

연결을 통해서 java --version 확인(자바설치가 정상적인지 확인)
ec2에서 확인해야할 사항)
ip주소 3.34.4.100 -> AWS_HOST를 만듦
사용자 ubuntu -> AWS_USER를 만듦
mykey.pem 파일내용 -> AWS_KEY를 만듦 (이건 다시 생성할테니 그때마다 바꾸셈
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA0+T3Q3j+N+3N5U2iGBI3/krpI2iT59oRRRmAkDbJS1uDL1/U
dAGqSFZLaCIcBsAbHcSBSaTusis+cA2UzKinISbV7XPsnFMhajoh/BBKJqIqKkVn
DPF+te6wMQQPBwF6KL31mA3w3ChybKP1i6gflNoMj49E4mR9/7EzuZlhMli5BXf9
SYWUHKae9TAGyU9yTh7T8CXOJLyeMXWXwPEPIjWmpjFgvmCmg0uZQtQR9/c75maL
rpAUabpbgW4/p9aN7v96r447qKOH4sfA8gdQvTQdNePYCUAvkiPzTjqAzKbg7SRl
U3MR8wSeb8frmNdF9rAx4TsxhsPXj9Bef0/pSwIDAQABAoIBAQCPVmsBpJ5r3R0U
CbEmEWT5S1lsj3jGNVjLYpX6eGUw6eXTLUM9ekbjiiSWe8RzuI5fU6eV1tF1ixVA
nZ9T1p7AKVI7v9iGYyHOhyaoKajPe5GEaNBuDAsILT/Y2IMF3TTyzJWPV5bghyfo
X/1hjMhYXCx1DJivgQVO62MvIReEAw9rjk82yej+7iizs9DlSLzolGMy7kzWcXcv
CGzg2LokoTUkDJcdWHVgJw5U8m3HhyApNedHB2zeOLPJIGMSY9654gcNsspftTUt
CDiCNHK870CauAsVpb0sLl3asrVrSgqrpX4wpJ9j5WegEqgZQuRO9ZiBzcfs3KJN
2ifxGUwZAoGBAO6WEs5BJC2Qq4Xp+qNVLWTckKrajDPft9YNWnO7lRxRtPJr+c2Y
4W2bRrvH68srg7tpNFNQAPV/u9VhcXYOEmoai6EsaAGcHgD6Ji+0BnJIuKLoqjZ3
LG+PJ2GmWB7JAnfCEFqfidHTIuSz7qAqgmzaxmJf2+RsmDetVpUZ5iwvAoGBAONc
KXoYOZS831qEAHwq93nl5Fz6UA3tmlTYS43wzebyIxbn8CY5C8lJspZrWi4Dy1nS
OZpZ46R06dKHMB2e4H3yphIXnLIQFMICVjl/HGP1cZ+U9S58rY3pqZJ5s9n3rj08
4sZfYS4yky2UIVvyS7E2yc5C9EpDZCTqEQb8OsGlAoGAd3krPaGdLjwNyGdcnUHg
E2vn/canAqr68fOJ4f6DMsUvqV2sn+n4qNxi1VHNn9XQh56tFzMu58DpHHdJS+bM
DdnxJeqIwpWc6LxbNvQdbklAPEPqSI/w7oRvIhUcd34NAE9rxRWy/CGQjZoU2puu
6De9tDFwebhvmSHyA4QOoP0CgYBUKZWhAL6v9IqpsxuK20zo7tTuJirkPQRYTAkL
7gwKZa/fltQrEgru5D0buXmUdwsboNp57LR7+Ftl9200Sc/IT75yDBORRqqodrz8
Y7Vau0zoSffI0ZZdZhXDhxGwqiLxwEwiKsSKmWYqBR+kLbkfTKy/kcFkjDXSBGNx
NoV5kQKBgQCq2tDwnjhhM3TICzVsatFzt2nNzT+uZDnJjbUIRY+lI2KC4pDVSOQC
2QS4ge90I1utla4+VQkBF1fw6scD7JeP7eVTwIf+tE46bwjdEaufDaGivZkc+Pa1
orzIzQCHH0L9hf/pIHE1Q43/FtRL4NPzjytMfC6kb3Uv//NJrzuURA==
-----END RSA PRIVATE KEY-----

##github 로그인 후 프로젝트 생성
git branch -M main
git push -u origin main
git remote add origin https://github.com/WonDongGeon/AWS_Repository.git
git push -u origin main

#workflows/main.yml파일 생성
name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR package
        run: |
          cd aws_github_springboot
          mvn clean package -DskipTests

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_KEY }}
          source: "aws_github_springboot/target/*.jar"
          target: "/home/${{ secrets.AWS_USER }}/app/"  # target 디렉터리 아님, app 바로 밑에 저장

      - name: SSH and restart app safely
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_KEY }}
          script: |
            set -euxo pipefail
            APP_DIR="/home/${{ secrets.AWS_USER }}/app"

            echo "===== Starting new app ====="
            JAR_FILE=$(ls -t "$APP_DIR"/aws_github_springboot/target/*.jar | head -n 1)
            if [ -z "$JAR_FILE" ]; then
              echo "ERROR: No JAR file found in $APP_DIR"
              exit 1
            fi

            nohup setsid java -jar "$JAR_FILE" > "$APP_DIR/app.log" 2>&1 & disown

            sleep 5
            echo "===== Running java processes ====="
            ps -ef | grep java || true

            echo "===== Tail app.log ====="
            tail -n 20 "$APP_DIR/app.log" || true

##github action(프로젝트 setting)
AWS_HOST ec2 public ip 주소 입력
AWS_USER ubuntu
AWS_KEY ec2 mykey.pem 내용 입력

#이클립스에서 github접속을 위한 토큰생성(인증)(계정에 대한 settings)
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

#spring boot로 소스코드 개발
#로컬저장소를 만들고, 원격저장소하고 완전다른코드일 때
1)브런치 일치(commit -> master -> rename main)
2)원격저장소 등록(이클립스는 git에서 등록/token password 입력)
git remote add origin https://github.com/WonDongGeon/AWS_Repository.git
3)원격저장소, 로컬저장소 소스 코드 불일치
git pull origin main --allow-unrelated-histories
(원격저장소에 있는 코드를 로컬저장소 일치)
esc -> :wq!
4)로컬저장소 코드를 원격저장소에 push 
git push origin main --force

##spring boot web 개발
@SpringBootApplication
@RestController
public class WwwApplication {

	public static void main(String[] args) {
		SpringApplication.run(WwwApplication.class, args);
	}

	 @GetMapping("/")
	    public String home() {
	        return "Hello, Spring Boot!";
	    }	
}