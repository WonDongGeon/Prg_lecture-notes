##nginx서버 설치
https://nginx.org/en/download.html

##nginx 서버의 역할 이해
front(웹서버)역할, proxy서버 역할, front+proxy

##확인사항 :  
1)웹서버로 사용할 경우 정적파일(index.html)의 위치 확인
/usr/share/nginx/html

2)설정파일 : 파일의 위치와 파일명
/etc/nginx/nginx.conf ← 메인 설정 파일, 파일내용중 include /etc/nginx/conf.d/*.conf; 내용은 하위에 여러개의 설정파일을 작성하고 별도로 적용할 수 있다는 의미
기본적으로 /etc/nginx/conf.d/default.conf가 존재하고 이파일을 설정처리하여 프록시 설정이 가능하게 한다.
/etc/nginx/sites-available/ ← 개별 사이트 설정 (Ubuntu 계열)
/etc/nginx/sites-enabled/ ← 실제 적용되는 설정의 심볼릭 링크

#front 서버역할 실습
/usr/share/nginx/html/index.html 수정하기
파일을 수정한 후 웹서버를 다시 확인

#proxy서버 역할
- /etc/nginx/conf.d/default.conf 설정변경
 location / {
            #root   html;
            #index  index.html index.htm;
	proxy_pass http://172.17.0.3:8080;
        	proxy_set_header Host $host;
        	proxy_set_header X-Real-IP $remote_addr;
        	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        	proxy_set_header X-Forwarded-Proto $scheme;
 }

#nginx 설정 후 서버 재시작
nginx -s reload

#tomcat docker파일 생성
tomcat/tomcat1이미지를 다운받아 컨테이너를 실행
외부망에서 동작되는지 확인 후 컨테이너를 종료하고
내부망으로만 컨테이너 실행

#foont+proxy
1)2)nginx html server + proxy 동작실습
1)localhost:3000 실행했을 때 /var/www/static-site/index.html 실행되게 확인
2)localhost:3000/api/ 실행했을 때 tomcat실행되게 확인

## /etc/nginx/conf.d/default.conf 설정변경
server {
    listen 80;
    server_name localhost;

    root /usr/share/nginx/html;
    index index.html;

    location / {
        try_files $uri $uri/ =404;
    }

    location /api/ {
        proxy_pass http://172.17.0.3:8080/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

서버 재시작 : nginx -s reload

##실습 tomcat서버의 /usr/local/tomcat/webapps/ROOT/폴더 아래에 my.json파일 생성
{"name":"hongkildong","email":"hong@gmail.com"}

PC에서 http://localhost:3000/api/my.json 실행확인

nginx서버의 /usr/share/nginx/html/index.html파일
<script>
fetch("/api/my.json", {
	 method: "GET",
	 headers : {"Content-Type" : "application/json"},
	})
	.then(response => {
		if(response.ok) {
			return response.Json(); 
		} else {
			throw new Error("Network response was not ok: " + response.status);
		}
	})
	.then((data) => {
		console.log(" fetched data : ", data);
		document.querySelector("body").innerHTML=`<ul><li>${data.name}</li><li>${data.email}</li></ul>`;
	})
	.catch(error => {
		console.error(" error them :", error);
		document.querySelector("body").textContent=error;
	})
</script>