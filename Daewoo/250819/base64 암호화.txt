------------------base64로 자바스크립트에서 암호화--------------------
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script>
function encodeToBase64() {
var inputString = document.getElementById("password").value;
var encodedString = btoa(inputString); // JavaScript의 base64 인코딩
document.getElementById("password").value = encodedString;

}
    </script>
</head>
<body>
<form action="/login" method="post" onsubmit="return encodeToBase64()">
<p>아 이 디 <input type="text" name="username"><p>
<p>비밀번호<input type="password" name="password" id="password"><p>
<p><input type="submit" value="로그인"><p>
</form>
</body>
</html>
------------------------자바에서 base64복호화-------------------------
 // Base64 디코딩
        byte[] decodedBytes = Base64.getDecoder().decode(password);
        password = new String(decodedBytes);

        System.out.println("Decoded String: " + password);
---------------------------------------------------------------------------
자바스크립트에서 암호화하기
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1-crypto-js.js"></script>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AES 암호화 예제</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1-crypto-js.js"></script>
</head>
<body>
    <script>
        // 암호화 함수
        function encryptPassword(password) {
            const key = "your-secret-key";  // 암호화 키 (자주 변경하지 않도록 주의)
            const encrypted = CryptoJS.AES.encrypt(password, key).toString();
            console.log("암호화된 비밀번호: ", encrypted);
            return encrypted;
        }

        // 비밀번호 암호화
        const encryptedPassword = encryptPassword('mySecretPassword123');
    </script>
</body>
</html>


자바에서 복호화 하기
 String encryptedPassword = "암호화된 비밀번호를 여기에 입력하세요"; 
 String key = "your-secret-key";  // 암호화에 사용한 키

// AES 복호화
String decryptedPassword = decryptPassword(encryptedPassword, key);
System.out.println("복호화된 비밀번호: " + decryptedPassword);


----------------------------------------------------------------
@SpringBootApplication
@Controller
public class DemoApplication {

	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}
	
	//src/webapp/WEB-INF/index.jsp
	@RequestMapping("/")
	public String index() {
		return "index";
	}
	
	//src/webapp/WEB-INF/login.jsp
	//로그인처리
	@PostMapping("login")
	@ResponseBody
	public String login(String username, String password) {
		System.out.println(username);
		System.out.println(password);
		byte[] decodedBytes = Base64.getDecoder().decode(password);
        password = new String(decodedBytes);
        System.out.println("Decoded String: " + password);
		return null;
	}
	//비대칭 암호화 해석
	@PostMapping("/login2")
	@ResponseBody
	public String login2(String username, String password) throws Exception {
		System.out.println("username:"+username);	
		System.out.println("base64+aes:"+password);
		
		byte[] decodedBytes = Base64.getDecoder().decode(password);
        String encryptedPassword = new String(decodedBytes);
        System.out.println("base 64 Decoded String: " + encryptedPassword);
        
        String key = "abcdkey";  // 암호화에 사용한 키
        // AES 복호화
       String decryptedPassword = decryptPassword(encryptedPassword, key);
       System.out.println("복호화된 비밀번호: " + decryptedPassword);
       
		return "성공";
	}
	
	//gpt:자바 aes 복호화 함수 
	 public static String decryptPassword(String encrypted, String key) throws Exception {
	        // Cipher 인스턴스 생성: AES/ECB/PKCS5Padding
	        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");

	        // 키 지정 (16, 24, 32 바이트만 가능)
	        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes("UTF-8"), "AES");

	        // 복호화 초기화
	        cipher.init(Cipher.DECRYPT_MODE, keySpec);

	        // Base64로 인코딩된 암호문 디코딩
	        byte[] decodedBytes = Base64.getDecoder().decode(encrypted);

	        // 복호화 수행
	        byte[] decryptedBytes = cipher.doFinal(decodedBytes);

	        return new String(decryptedBytes, "UTF-8");
	    }

}

